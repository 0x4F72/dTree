{"version":3,"sources":["dTree.min.js","/source/dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","allNodes","_flatten","nodeSize","_calculateNodeSize","value","zoom","d3","behavior","scaleExtent","on","_","bind","svg","attr","event","translate","scale","select","append","width","margin","left","right","height","top","bottom","call","tree","layout","separation","a","b","hidden","_update","source","nodes","rootOffset","y","forEach","n","links","selectAll","data","enter","styles","linage","_elbow","_linkSiblings","marriage","_siblingLine","d","id","x","callbacks","nodeClick","name","extra","text","textClass","recurse","node","children","push","noParent","ny","linedata","fun","line","interpolate","start","filter","v","end","longest","version","init","options","arguments","undefined","defaultsDeep","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","m","spouse","child"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n      this.nodeSize = this._calculateNodeSize();\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var zoom = d3.behavior.zoom().scaleExtent([0.1, 10]).on('zoom', _.bind(function () {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' + ' scale(' + d3.event.scale + ')');\n        }, this));\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', opts.width + opts.margin.left + opts.margin.right).attr('height', opts.height + opts.margin.top + opts.margin.bottom).call(zoom).append('g').attr('transform', 'translate(' + opts.margin.left + ',' + opts.margin.top + ')');\n\n        // Compute the layout.\n        this.tree = d3.layout.tree().nodeSize(nodeSize);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.hidden || b.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var nodes = this.tree.nodes(source);\n\n        // Since root node is hidden, readjust height.\n        var rootOffset = 0;\n        if (nodes.length > 1) {\n          rootOffset = nodes[1].y;\n        }\n        _.forEach(nodes, function (n) {\n          n.y = n.y - rootOffset / 2;\n        });\n\n        var links = this.tree.links(nodes);\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter().append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(nodes).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', this._siblingLine);\n\n        // Create the node rectangles.\n        nodes.append('rect').attr('class', function (d) {\n          return d['class'] ? d['class'] : opts.styles.nodes;\n        }).attr('width', nodeSize[0] / 2).attr('height', nodeSize[1] / 3).attr('id', function (d) {\n          return d.id;\n        }).attr('display', function (d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        }).attr('x', function (d) {\n          return d.x - nodeSize[0] / 4;\n        }).attr('y', function (d) {\n          return d.y - nodeSize[1] / 6;\n        }).on('click', function (d) {\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n\n        // Create the node text label.\n        nodes.append('text').text(function (d) {\n          return opts.callbacks.text(d.name, d.extra, d.id);\n        }).attr('class', function (d) {\n          return d.textClass ? d.textClass : opts.styles.text;\n        }).attr('x', function (d) {\n          return d.x - nodeSize[0] / 4 + 5;\n        }).attr('y', function (d) {\n          return d.y + 4;\n        }).on('click', function (d) {\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_calculateNodeSize',\n      value: function _calculateNodeSize() {\n        var longest = '';\n        _.forEach(this.allNodes, function (n) {\n          if (n.name.length > longest.length) {\n            longest = n.name;\n          }\n        });\n\n        return [longest.length * 10 + 10, longest.length * 5];\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    version: '0.2.3',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          text: function text(name, extra, id) {\n            return name;\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass,\n          'class': person['class']\n        };\n\n        // add to parent as child\n        parent.children.push(node);\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          parent.children.push(m);\n\n          var spouse = {\n            name: person.marriage.spouse.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: person.marriage.spouse.textClass,\n            'class': person.marriage.spouse['class'],\n            extra: person.marriage.spouse.extra\n          };\n\n          parent.children.push(spouse);\n\n          _.forEach(person.marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n        }\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      _.forEach(root.children, function (child) {\n        child.noParent = true;\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.dTree = factory();\n}(this, function () { 'use strict';\n\n  class TreeBuilder {\n\n    constructor(root, siblings, opts) {\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n      this.nodeSize = this._calculateNodeSize();\n    }\n\n    create() {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var zoom = d3.behavior.zoom()\n        .scaleExtent([0.1, 10])\n        .on('zoom', _.bind(function() {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' +\n            ' scale(' + d3.event.scale + ')');\n        }, this));\n\n      //make an SVG\n      var svg = this.svg = d3.select(opts.target)\n        .append('svg')\n        .attr('width', opts.width + opts.margin.left + opts.margin.right)\n        .attr('height', opts.height + opts.margin.top + opts.margin.bottom)\n        .call(zoom)\n        .append('g')\n        .attr('transform', 'translate(' + opts.margin.left + ',' + opts.margin.top + ')');\n\n      // Compute the layout.\n      this.tree = d3.layout.tree()\n        .nodeSize(nodeSize);\n\n      this.tree.separation(function separation(a, b) {\n        if (a.hidden || b.hidden) {\n          return 0.3;\n        } else {\n          return 0.6;\n        }\n      });\n\n      this._update(this.root);\n\n    }\n\n    _update(source) {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var nodes = this.tree.nodes(source);\n\n      // Since root node is hidden, readjust height.\n      var rootOffset = 0;\n      if (nodes.length > 1) {\n        rootOffset = nodes[1].y;\n      }\n      _.forEach(nodes, function(n) {\n        n.y = n.y - rootOffset / 2;\n      });\n\n      var links = this.tree.links(nodes);\n\n      // Create the link lines.\n      this.svg.selectAll('.link')\n        .data(links)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.linage)\n        .attr('d', this._elbow);\n\n      var nodes = this.svg.selectAll('.node')\n        .data(nodes)\n        .enter();\n\n      this._linkSiblings();\n\n      // Draw siblings (marriage)\n      this.svg.selectAll('.sibling')\n        .data(this.siblings)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.marriage)\n        .attr('d', this._siblingLine);\n\n      // Create the node rectangles.\n      nodes.append('rect')\n        .attr('class', function(d) {\n          return d.class ? d.class : opts.styles.nodes;\n        })\n        .attr('width', nodeSize[0] / 2)\n        .attr('height', nodeSize[1] / 3)\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .attr('display', function(d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        })\n        .attr('x', function(d) {\n          return d.x - nodeSize[0] / 4;\n        })\n        .attr('y', function(d) {\n          return d.y - nodeSize[1] / 6;\n        })\n        .on('click', function(d) {\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n\n      // Create the node text label.\n      nodes.append('text')\n        .text(function(d) {\n          return opts.callbacks.text(d.name, d.extra, d.id);\n        })\n        .attr('class', function(d) {\n          return d.textClass ? d.textClass : opts.styles.text;\n        })\n        .attr('x', function(d) {\n          return d.x - nodeSize[0] / 4 + 5;\n        })\n        .attr('y', function(d) {\n          return d.y + 4;\n        })\n        .on('click', function(d) {\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n    }\n\n    _flatten(root) {\n      var n = [];\n      var i = 0;\n\n      function recurse(node) {\n        if (node.children) {\n          node.children.forEach(recurse);\n        }\n        if (!node.id) {\n          node.id = ++i;\n        }\n        n.push(node);\n      }\n      recurse(root);\n      return n;\n    }\n\n    _elbow(d, i) {\n      if (d.target.noParent) {\n        return 'M0,0L0,0';\n      }\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.target.x,\n        y: d.target.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.source.x,\n        y: d.source.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _linkSiblings() {\n\n      var allNodes = this.allNodes;\n\n      _.forEach(this.siblings, function(d)  {\n        var start = allNodes.filter(function(v) {\n          return d.source.id == v.id;\n        });\n        var end = allNodes.filter(function(v) {\n          return d.target.id == v.id;\n        });\n        d.source.x = start[0].x;\n        d.source.y = start[0].y;\n        d.target.x = end[0].x;\n        d.target.y = end[0].y;\n      });\n\n    }\n\n    _siblingLine(d, i) {\n\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.source.x,\n        y: d.source.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.target.x,\n        y: d.target.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _calculateNodeSize() {\n      var longest = '';\n      _.forEach(this.allNodes, function(n) {\n        if (n.name.length > longest.length) {\n          longest = n.name;\n        }\n      });\n\n      return [longest.length * 10 + 10, longest.length * 5];\n    }\n\n  }\n\n  const dTree = {\n\n    version: '0.2.3',\n\n    init: function(data, options = {}) {\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function(name, extra, id) {},\n          text: function(name, extra, id) {return name;}\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n\n    },\n\n    _preprocess: function(data) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass,\n          class: person.class\n        };\n\n        // add to parent as child\n        parent.children.push(node);\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          parent.children.push(m);\n\n          var spouse = {\n            name: person.marriage.spouse.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: person.marriage.spouse.textClass,\n            class: person.marriage.spouse.class,\n            extra: person.marriage.spouse.extra\n          };\n\n          parent.children.push(spouse);\n\n          _.forEach(person.marriage.children, function(child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n\n        }\n\n      };\n\n      _.forEach(data, function(person) {\n        reconstructTree(person, root);\n      });\n\n      _.forEach(root.children, function(child) {\n        child.noParent = true;\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n\n    }\n\n  };\n\n  return dTree;\n\n}));"],"sourceRoot":"/source/"}