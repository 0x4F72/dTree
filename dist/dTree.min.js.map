{"version":3,"sources":["dTree.min.js","/source/dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","allNodes","_flatten","nodeSize","_calculateNodeSize","debugLevel","debug","value","width","margin","left","right","height","top","bottom","zoom","d3","behavior","scaleExtent","on","_","bind","svg","attr","event","translate","scale","select","append","call","tree","layout","separation","a","b","hidden","_update","source","nodes","rootOffset","y","forEach","n","links","selectAll","data","enter","styles","linage","_elbow","_linkSiblings","marriage","_siblingLine","d","x","id","html","callbacks","nodeRenderer","name","extra","textClass","text","textRenderer","nodeClick","recurse","node","children","push","noParent","ny","linedata","fun","line","interpolate","start","filter","v","end","longest","nodeClass","msg","console","log","version","init","options","arguments","undefined","defaultsDeep","_nodeRenderer","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","child","m","spouse"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n      this.nodeSize = this._calculateNodeSize();\n\n      TreeBuilder.debugLevel = opts.debug ? 1 : 0;\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.behavior.zoom().scaleExtent([0.1, 10]).on('zoom', _.bind(function () {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' + ' scale(' + d3.event.scale + ')');\n        }, this));\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        zoom.translate([width / 2, opts.margin.top]);\n\n        // Compute the layout.\n        this.tree = d3.layout.tree().nodeSize(nodeSize);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.hidden || b.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var nodes = this.tree.nodes(source);\n\n        // Since root node is hidden, readjust height.\n        var rootOffset = 0;\n        if (nodes.length > 1) {\n          rootOffset = nodes[1].y;\n        }\n        _.forEach(nodes, function (n) {\n          n.y = n.y - rootOffset / 2;\n        });\n\n        var links = this.tree.links(nodes);\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter().append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(nodes).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', this._siblingLine);\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').attr('display', function (d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        }).attr('x', function (d) {\n          return d.x - nodeSize[0] / 4;\n        }).attr('y', function (d) {\n          return d.y - nodeSize[1] / 6;\n        }).attr('width', nodeSize[0] / 2).attr('height', nodeSize[1] / 3).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          if (d.hidden) {\n            return null;\n          }\n          return opts.callbacks.nodeRenderer(d.name, d.x, d.y, nodeSize[0] / 2, nodeSize[1] / 3, d.extra, d.id, d['class'] ? d['class'] : opts.styles.nodes, d.textClass ? d.textClass : opts.styles.text, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_calculateNodeSize',\n      value: function _calculateNodeSize() {\n\n        // Not used at the moment\n        var longest = '';\n        _.forEach(this.allNodes, function (n) {\n          if (n.name.length > longest.length) {\n            longest = n.name;\n          }\n        });\n\n        return [200, 100];\n      }\n    }], [{\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.debugLevel > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    version: '0.4.0',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass,\n          'class': person['class']\n        };\n\n        // add to parent as child\n        parent.children.push(node);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          parent.children.push(m);\n\n          var spouse = {\n            name: person.marriage.spouse.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: person.marriage.spouse.textClass,\n            'class': person.marriage.spouse['class'],\n            extra: person.marriage.spouse.extra\n          };\n\n          parent.children.push(spouse);\n\n          _.forEach(person.marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n        }\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      _.forEach(root.children, function (child) {\n        child.noParent = true;\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.dTree = factory();\n}(this, function () { 'use strict';\n\n  class TreeBuilder {\n\n    constructor(root, siblings, opts) {\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n      this.nodeSize = this._calculateNodeSize();\n\n      TreeBuilder.debugLevel = opts.debug ? 1 : 0;\n    }\n\n    create() {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var width = opts.width + opts.margin.left + opts.margin.right;\n      var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n      var zoom = d3.behavior.zoom()\n        .scaleExtent([0.1, 10])\n        .on('zoom', _.bind(function() {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' +\n            ' scale(' + d3.event.scale + ')');\n        }, this));\n\n      //make an SVG\n      var svg = this.svg = d3.select(opts.target)\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .call(zoom)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n      zoom.translate([width / 2, opts.margin.top]);\n\n      // Compute the layout.\n      this.tree = d3.layout.tree()\n        .nodeSize(nodeSize);\n\n      this.tree.separation(function separation(a, b) {\n        if (a.hidden || b.hidden) {\n          return 0.3;\n        } else {\n          return 0.6;\n        }\n      });\n\n      this._update(this.root);\n\n    }\n\n    _update(source) {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var nodes = this.tree.nodes(source);\n\n      // Since root node is hidden, readjust height.\n      var rootOffset = 0;\n      if (nodes.length > 1) {\n        rootOffset = nodes[1].y;\n      }\n      _.forEach(nodes, function(n) {\n        n.y = n.y - rootOffset / 2;\n      });\n\n      var links = this.tree.links(nodes);\n\n      // Create the link lines.\n      this.svg.selectAll('.link')\n        .data(links)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.linage)\n        .attr('d', this._elbow);\n\n      var nodes = this.svg.selectAll('.node')\n        .data(nodes)\n        .enter();\n\n      this._linkSiblings();\n\n      // Draw siblings (marriage)\n      this.svg.selectAll('.sibling')\n        .data(this.siblings)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.marriage)\n        .attr('d', this._siblingLine);\n\n      // Create the node rectangles.\n      nodes.append('foreignObject')\n        .attr('display', function(d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        })\n        .attr('x', function(d) {\n          return d.x - nodeSize[0] / 4;\n        })\n        .attr('y', function(d) {\n          return d.y - nodeSize[1] / 6;\n        })\n        .attr('width', nodeSize[0] / 2)\n        .attr('height', nodeSize[1] / 3)\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .html(function(d) {\n          if (d.hidden) {\n            return null;\n          }\n          return opts.callbacks.nodeRenderer(\n            d.name,\n            d.x,\n            d.y,\n            nodeSize[0] / 2,\n            nodeSize[1] / 3,\n            d.extra,\n            d.id,\n            d.class ? d.class : opts.styles.nodes,\n            d.textClass ? d.textClass : opts.styles.text,\n            opts.callbacks.textRenderer);\n        })\n        .on('click', function(d)  {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n    }\n\n    _flatten(root) {\n      var n = [];\n      var i = 0;\n\n      function recurse(node) {\n        if (node.children) {\n          node.children.forEach(recurse);\n        }\n        if (!node.id) {\n          node.id = ++i;\n        }\n        n.push(node);\n      }\n      recurse(root);\n      return n;\n    }\n\n    _elbow(d, i) {\n      if (d.target.noParent) {\n        return 'M0,0L0,0';\n      }\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.target.x,\n        y: d.target.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.source.x,\n        y: d.source.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _linkSiblings() {\n\n      var allNodes = this.allNodes;\n\n      _.forEach(this.siblings, function(d)  {\n        var start = allNodes.filter(function(v) {\n          return d.source.id == v.id;\n        });\n        var end = allNodes.filter(function(v) {\n          return d.target.id == v.id;\n        });\n        d.source.x = start[0].x;\n        d.source.y = start[0].y;\n        d.target.x = end[0].x;\n        d.target.y = end[0].y;\n      });\n\n    }\n\n    _siblingLine(d, i) {\n\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.source.x,\n        y: d.source.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.target.x,\n        y: d.target.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _calculateNodeSize() {\n\n      // Not used at the moment\n      var longest = '';\n      _.forEach(this.allNodes, function(n) {\n        if (n.name.length > longest.length) {\n          longest = n.name;\n        }\n      });\n\n      return [200, 100];\n    }\n\n    static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n      var node = '';\n      node += '<div ';\n      node += 'style=\"height:100%;width:100%;\" ';\n      node += 'class=\"' + nodeClass + '\" ';\n      node += 'id=\"node' + id + '\">\\n';\n      node += textRenderer(name, extra, textClass);\n      node += '</div>';\n      return node;\n    }\n\n    static _textRenderer(name, extra, textClass) {\n      var node = '';\n      node += '<p ';\n      node += 'align=\"center\" ';\n      node += 'class=\"' + textClass + '\">\\n';\n      node += name;\n      node += '</p>\\n';\n      return node;\n    }\n\n    static _debug(msg) {\n      if (TreeBuilder.debugLevel > 0)  {\n        console.log(msg);\n      }\n    }\n\n  }\n\n  const dTree = {\n\n    version: '0.4.0',\n\n    init: function(data, options = {}) {\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function(name, extra, id) {},\n          nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\n              id,nodeClass, textClass, textRenderer);\n          },\n          textRenderer: function(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n\n    },\n\n    _preprocess: function(data) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass,\n          class: person.class\n        };\n\n        // add to parent as child\n        parent.children.push(node);\n\n        // add \"direct\" children\n        _.forEach(person.children, function(child) {\n          reconstructTree(child, node);\n        });\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          parent.children.push(m);\n\n          var spouse = {\n            name: person.marriage.spouse.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: person.marriage.spouse.textClass,\n            class: person.marriage.spouse.class,\n            extra: person.marriage.spouse.extra\n          };\n\n          parent.children.push(spouse);\n\n          _.forEach(person.marriage.children, function(child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n\n        }\n\n      };\n\n      _.forEach(data, function(person) {\n        reconstructTree(person, root);\n      });\n\n      _.forEach(root.children, function(child) {\n        child.noParent = true;\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n\n    }\n\n  };\n\n  return dTree;\n\n}));"],"sourceRoot":"/source/"}