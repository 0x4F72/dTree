{"version":3,"sources":["dTree.min.js","/source/dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","visibleNodes","_","filter","n","hidden","nodeSize","callbacks","nodeWidth","textRenderer","value","width","margin","left","right","height","top","bottom","zoom","d3","behavior","scaleExtent","on","bind","svg","attr","event","translate","scale","select","append","call","tree","layout","separation","a","b","_update","source","nodes","rootOffset","y","forEach","links","selectAll","data","enter","styles","linage","_elbow","_linkSiblings","marriage","_siblingLine","d","x","id","html","nodeRenderer","name","extra","textClass","nodeClick","recurse","node","children","push","noParent","ny","linedata","fun","line","interpolate","start","v","end","maxWidth","maxHeight","container","document","createElement","style","marginLeft","paddingTop","visibility","text","innerHTML","body","appendChild","Math","max","offsetHeight","clientWidth","removeChild","nodeClass","msg","console","log","VERSION","init","options","arguments","undefined","defaultsDeep","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_preprocess","treeBuilder","create","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","m","sp","spouse","marriedCouple","persons","sort"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function (n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes, opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        var zoom = d3.behavior.zoom().scaleExtent([0.1, 10]).on('zoom', _.bind(function () {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' + ' scale(' + d3.event.scale + ')');\n        }, this));\n\n        //make an SVG\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('width', width).attr('height', height).call(zoom).append('g').attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n        zoom.translate([width / 2, opts.margin.top]);\n\n        // Compute the layout.\n        this.tree = d3.layout.tree().nodeSize([nodeSize[0] * 2, nodeSize[1] * 2]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.hidden || b.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var nodes = this.tree.nodes(source);\n\n        // Since root node is hidden, readjust height.\n        var rootOffset = 0;\n        if (nodes.length > 1) {\n          rootOffset = nodes[1].y;\n        }\n        _.forEach(nodes, function (n) {\n          n.y = n.y - rootOffset / 2;\n        });\n\n        var links = this.tree.links(nodes);\n\n        // Create the link lines.\n        this.svg.selectAll('.link').data(links).enter().append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.svg.selectAll('.node').data(nodes).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.svg.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', this._siblingLine);\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').attr('display', function (d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        }).attr('x', function (d) {\n          return d.x - nodeSize[0] / 2 + 'px';\n        }).attr('y', function (d) {\n          return d.y - nodeSize[1] / 2 + 'px';\n        }).attr('width', nodeSize[0] + 'px').attr('height', nodeSize[1] + 'px').attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          if (d.hidden) {\n            return null;\n          }\n          return opts.callbacks.nodeRenderer(d.name, d.x, d.y, nodeSize[0], nodeSize[1], d.extra, d.id, d['class'], d.textClass, opts.callbacks.textRenderer);\n        }).on('click', function (d) {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.svg.line().x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        }).interpolate('step-after');\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        _.forEach(nodes, function (n) {\n          var container = document.createElement('div');\n          container.style.marginLeft = '5px';\n          container.style.paddingTop = '5px';\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.name, n.extra, n.textClass);\n          container.innerHTML = text;\n          document.body.appendChild(container);\n\n          maxHeight = Math.max(maxHeight, container.offsetHeight);\n          maxWidth = Math.max(maxWidth, container.clientWidth);\n          document.body.removeChild(container);\n        });\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '0.7.0',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          var sp = person.marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra\n          };\n\n          var marriedCouple = dTree._sortPersons([node, spouse], opts);\n          parent.children.push(marriedCouple[0], m, marriedCouple[1]);\n\n          dTree._sortPersons(person.marriage.children, opts);\n          _.forEach(person.marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n        } else {\n          parent.children.push(node);\n        }\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    }\n\n  };\n\n  return dTree;\n});\n//# sourceMappingURL=dTree.js.map\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  global.dTree = factory();\n}(this, function () { 'use strict';\n\n  class TreeBuilder {\n\n    constructor(root, siblings, opts) {\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // Calculate node size\n      var visibleNodes = _.filter(this.allNodes, function(n) {\n        return !n.hidden;\n      });\n      this.nodeSize = opts.callbacks.nodeSize(visibleNodes,\n        opts.nodeWidth, opts.callbacks.textRenderer);\n    }\n\n    create() {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var width = opts.width + opts.margin.left + opts.margin.right;\n      var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n      var zoom = d3.behavior.zoom()\n        .scaleExtent([0.1, 10])\n        .on('zoom', _.bind(function() {\n          svg.attr('transform', 'translate(' + d3.event.translate + ')' +\n            ' scale(' + d3.event.scale + ')');\n        }, this));\n\n      //make an SVG\n      var svg = this.svg = d3.select(opts.target)\n        .append('svg')\n        .attr('width', width)\n        .attr('height', height)\n        .call(zoom)\n        .append('g')\n        .attr('transform', 'translate(' + width / 2 + ',' + opts.margin.top + ')');\n\n      zoom.translate([width / 2, opts.margin.top]);\n\n      // Compute the layout.\n      this.tree = d3.layout.tree()\n        .nodeSize([nodeSize[0] * 2, nodeSize[1] * 2]);\n\n      this.tree.separation(function separation(a, b) {\n        if (a.hidden || b.hidden) {\n          return 0.3;\n        } else {\n          return 0.6;\n        }\n      });\n\n      this._update(this.root);\n\n    }\n\n    _update(source) {\n\n      var opts = this.opts;\n      var allNodes = this.allNodes;\n      var nodeSize = this.nodeSize;\n\n      var nodes = this.tree.nodes(source);\n\n      // Since root node is hidden, readjust height.\n      var rootOffset = 0;\n      if (nodes.length > 1) {\n        rootOffset = nodes[1].y;\n      }\n      _.forEach(nodes, function(n) {\n        n.y = n.y - rootOffset / 2;\n      });\n\n      var links = this.tree.links(nodes);\n\n      // Create the link lines.\n      this.svg.selectAll('.link')\n        .data(links)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.linage)\n        .attr('d', this._elbow);\n\n      var nodes = this.svg.selectAll('.node')\n        .data(nodes)\n        .enter();\n\n      this._linkSiblings();\n\n      // Draw siblings (marriage)\n      this.svg.selectAll('.sibling')\n        .data(this.siblings)\n        .enter()\n        .append('path')\n        .attr('class', opts.styles.marriage)\n        .attr('d', this._siblingLine);\n\n      // Create the node rectangles.\n      nodes.append('foreignObject')\n        .attr('display', function(d) {\n          if (d.hidden) {\n            return 'none';\n          } else {\n            return '';\n          };\n        })\n        .attr('x', function(d) {\n          return d.x - nodeSize[0] / 2 + 'px';\n        })\n        .attr('y', function(d) {\n          return d.y - nodeSize[1] / 2 + 'px';\n        })\n        .attr('width', nodeSize[0] + 'px')\n        .attr('height', nodeSize[1] + 'px')\n        .attr('id', function(d) {\n          return d.id;\n        })\n        .html(function(d) {\n          if (d.hidden) {\n            return null;\n          }\n          return opts.callbacks.nodeRenderer(\n            d.name,\n            d.x,\n            d.y,\n            nodeSize[0],\n            nodeSize[1],\n            d.extra,\n            d.id,\n            d.class,\n            d.textClass,\n            opts.callbacks.textRenderer);\n        })\n        .on('click', function(d)  {\n          if (d.hidden) {\n            return;\n          }\n          opts.callbacks.nodeClick(d.name, d.extra, d.id);\n        });\n    }\n\n    _flatten(root) {\n      var n = [];\n      var i = 0;\n\n      function recurse(node) {\n        if (node.children) {\n          node.children.forEach(recurse);\n        }\n        if (!node.id) {\n          node.id = ++i;\n        }\n        n.push(node);\n      }\n      recurse(root);\n      return n;\n    }\n\n    _elbow(d, i) {\n      if (d.target.noParent) {\n        return 'M0,0L0,0';\n      }\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.target.x,\n        y: d.target.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.source.x,\n        y: d.source.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    _linkSiblings() {\n\n      var allNodes = this.allNodes;\n\n      _.forEach(this.siblings, function(d)  {\n        var start = allNodes.filter(function(v) {\n          return d.source.id == v.id;\n        });\n        var end = allNodes.filter(function(v) {\n          return d.target.id == v.id;\n        });\n        d.source.x = start[0].x;\n        d.source.y = start[0].y;\n        d.target.x = end[0].x;\n        d.target.y = end[0].y;\n      });\n\n    }\n\n    _siblingLine(d, i) {\n\n      var ny = d.target.y + (d.source.y - d.target.y) * 0.50;\n\n      var linedata = [{\n        x: d.source.x,\n        y: d.source.y\n      }, {\n        x: d.target.x,\n        y: ny\n      }, {\n        x: d.target.x,\n        y: d.target.y\n      }];\n\n      var fun = d3.svg.line()\n        .x(function(d) {\n          return d.x;\n        })\n        .y(function(d) {\n          return d.y;\n        })\n        .interpolate('step-after');\n      return fun(linedata);\n    }\n\n    static _nodeSize(nodes, width, textRenderer) {\n      var maxWidth = 0;\n      var maxHeight = 0;\n      _.forEach(nodes, function(n) {\n        var container = document.createElement('div');\n        container.style.marginLeft = '5px';\n        container.style.paddingTop = '5px';\n        container.style.visibility = 'hidden';\n        container.style.maxWidth = width + 'px';\n\n        var text = textRenderer(n.name, n.extra, n.textClass);\n        container.innerHTML = text;\n        document.body.appendChild(container);\n\n        maxHeight = Math.max(maxHeight, container.offsetHeight);\n        maxWidth = Math.max(maxWidth, container.clientWidth);\n        document.body.removeChild(container);\n      });\n      return [width, maxHeight];\n    }\n\n    static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n      var node = '';\n      node += '<div ';\n      node += 'style=\"height:100%;width:100%;\" ';\n      node += 'class=\"' + nodeClass + '\" ';\n      node += 'id=\"node' + id + '\">\\n';\n      node += textRenderer(name, extra, textClass);\n      node += '</div>';\n      return node;\n    }\n\n    static _textRenderer(name, extra, textClass) {\n      var node = '';\n      node += '<p ';\n      node += 'align=\"center\" ';\n      node += 'class=\"' + textClass + '\">\\n';\n      node += name;\n      node += '</p>\\n';\n      return node;\n    }\n\n    static _debug(msg) {\n      if (TreeBuilder.DEBUG_LEVEL > 0)  {\n        console.log(msg);\n      }\n    }\n\n  }\n\n  const dTree = {\n\n    VERSION: '0.7.0',\n\n    init: function(data, options = {}) {\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        callbacks: {\n          nodeClick: function(name, extra, id) {},\n          nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\n              id,nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\n          textRenderer: function(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          },\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        styles: {\n          node: 'node',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n\n    },\n\n    _preprocess: function(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          class: person.class ? person.class : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function(child) {\n          reconstructTree(child, node);\n        });\n\n        // go through marriage\n        if (person.marriage) {\n\n          var m = {\n            name: '',\n            id: id++,\n            hidden: true,\n            noParent: true,\n            children: [],\n            extra: person.marriage.extra\n          };\n\n          var sp = person.marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            class: sp.class ? sp.class : opts.styles.node,\n            extra: sp.extra\n          };\n\n          var marriedCouple = dTree._sortPersons([node, spouse], opts);\n          parent.children.push(marriedCouple[0], m, marriedCouple[1]);\n\n          dTree._sortPersons(person.marriage.children, opts);\n          _.forEach(person.marriage.children, function(child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            }\n          });\n\n        } else {\n          parent.children.push(node);\n        }\n\n      };\n\n      _.forEach(data, function(person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: root,\n        siblings: siblings\n      };\n\n    },\n\n    _sortPersons: function(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function(a, b) {\n          return opts.callbacks.nodeSorter(a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    }\n\n  };\n\n  return dTree;\n\n}));"],"sourceRoot":"/source/"}